{"Shader":{"ver":"0.1","info":{"id":"3dXGWB","date":"1547301110","viewed":1511,"name":"Stop Motion Fox","username":"iq","description":"For once, I decided to use other people's talent to mix something together quickly:\n* Terrain raytracer by Fizzer: [url]https:\/\/www.shadertoy.com\/view\/XlcBRX[\/url]\n* Fox model by pixelmannen: [url]https:\/\/opengameart.org\/content\/fox-and-shiba[\/url]\n","likes":32,"published":3,"flags":32,"tags":["3d"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/media\/a\/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Created by inigo quilez - iq\/2019\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\/\/ Terrain raytracer by Fizzer: https:\/\/www.shadertoy.com\/view\/XlcBRX\n\/\/ Fox model by pixelmannen: https:\/\/opengameart.org\/content\/fox-and-shiba\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord \/ iResolution.xy;\n    \n    \n    \/\/ simple dof\n    const float focus = 1.5;\n\n    vec4 acc = vec4(0.0);\n    const int N = 4;\n\tfor( int j=-N; j<=N; j++ )\n    for( int i=-N; i<=N; i++ )\n    {\n        vec2 off = vec2(float(i),float(j));\n        \n        vec4 tmp = texture( iChannel0, q + off\/vec2(800.0,450.0) ); \n        \n        float depth = tmp.w;\n        \n        vec3  color = tmp.xyz;\n        \n        float coc = 0.05 + 6.0*abs(depth-focus)\/depth;\n        \n        if( dot(off,off) < (coc*coc) )\n        {\n            float w = 1.0\/(coc*coc); \n            acc += vec4(color*w,w);\n        }\n    }\n    \n    vec3 col = acc.xyz \/ acc.w;\n\n    \n    \/\/ color greade\n    col = pow( col, vec3(0.8,0.95,1.0) ) - vec3(0.05,0.02,0.0);\n    \n\n    \/\/ vignette\n    col *= 0.7+0.3*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);\n\n\n    \/\/ contrast\n    col = clamp(col,0.0,1.0);\n    col = col*col*(3.0-2.0*col);\n\n\n    \/\/ noise\n    float fr = floor(iTime*24.0);\n    col *= 0.98+0.04*texture(iChannel1, q*0.5 + 0.6103398*vec2(fr*17.0,fr*131.0)).xyz;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":17,"src":"\/media\/a\/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ Created by inigo quilez - iq\/2019\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n#define AA 1  \/\/ make 2 if you have a fast computer\n\n\/\/ For once, I decided to use other people's talent to mix something together quickly:\n\/\/\n\/\/ Terrain raytracer by Fizzer: https:\/\/www.shadertoy.com\/view\/XlcBRX\n\/\/ Fox model by pixelmannen: https:\/\/opengameart.org\/content\/fox-and-shiba\n\n\n\/\/===========================================================================\n\/\/ Fox mesh: not optimized for size nor speed\nconst int numVertices = 290;\nconst int numFaces = 576;\nconst vec3 vertices[290] = vec3[](\nvec3(0.013121,-0.041925,-0.058432), vec3(0.000002,-0.038677,-0.074743),\nvec3(-0.000640,0.007444,-0.171702), vec3(0.000000,0.139801,0.435479),\nvec3(0.042753,0.147662,0.429791), vec3(0.031274,0.162265,0.458082),\nvec3(0.034108,0.192811,0.443056), vec3(0.019194,0.211223,0.453031),\nvec3(0.000000,0.216157,0.491010), vec3(0.023880,0.180512,0.479942),\nvec3(0.009851,0.211203,0.494789), vec3(0.063858,0.169008,0.403290),\nvec3(0.052884,0.106366,0.387282), vec3(0.063693,0.125410,0.364298),\nvec3(0.032114,-0.077131,0.232055), vec3(0.024366,-0.077497,0.228554),\nvec3(0.028579,-0.093127,0.221848), vec3(0.030350,0.225915,0.358234),\nvec3(0.060740,0.198357,0.361936), vec3(0.080303,0.268906,0.320895),\nvec3(0.000000,0.159350,0.474070), vec3(0.000000,0.204575,0.500000),\nvec3(0.000000,0.086004,0.402251), vec3(0.044899,0.007110,-0.151671),\nvec3(0.022447,0.003782,-0.147500), vec3(0.043569,-0.044520,-0.016936),\nvec3(0.034651,-0.048095,0.025030), vec3(0.000000,-0.057003,0.025435),\nvec3(0.000000,-0.056734,0.016791), vec3(0.005997,-0.049957,-0.017605),\nvec3(-0.000000,-0.049947,-0.017607), vec3(0.028697,-0.090494,-0.129474),\nvec3(0.019589,-0.079193,0.212568), vec3(0.010815,-0.081529,0.190533),\nvec3(0.023024,-0.103442,0.193122), vec3(0.024872,-0.131527,-0.409951),\nvec3(-0.000000,-0.138143,-0.409907), vec3(0.018722,-0.081289,-0.499202),\nvec3(0.040832,-0.107573,-0.417095), vec3(-0.000000,-0.008504,-0.336630),\nvec3(0.030416,-0.056700,-0.425668), vec3(0.016569,-0.056362,-0.494974),\nvec3(0.040841,-0.047447,0.025001), vec3(0.056357,-0.033211,0.024349),\nvec3(0.032075,-0.056984,0.160717), vec3(-0.000019,-0.033181,0.267108),\nvec3(0.013807,-0.038278,0.245386), vec3(0.042986,-0.027936,0.263443),\nvec3(0.044743,0.027886,0.318292), vec3(0.055112,0.046600,0.316356),\nvec3(0.023626,-0.047393,-0.018016), vec3(-0.000002,-0.062072,0.188291),\nvec3(0.026860,0.013155,-0.172355), vec3(-0.000000,-0.045058,-0.493075),\nvec3(-0.000000,-0.086597,-0.500000), vec3(-0.013114,-0.041916,-0.058419),\nvec3(0.000000,0.011698,0.319967), vec3(-0.031274,0.162265,0.458082),\nvec3(-0.042753,0.147662,0.429791), vec3(-0.034108,0.192811,0.443056),\nvec3(-0.019194,0.211223,0.453031), vec3(-0.023881,0.180512,0.479942),\nvec3(-0.009851,0.211203,0.494789), vec3(-0.063858,0.169008,0.403290),\nvec3(-0.052884,0.106366,0.387282), vec3(-0.063693,0.125410,0.364298),\nvec3(-0.032281,-0.077146,0.232062), vec3(-0.028723,-0.095532,0.221996),\nvec3(-0.024522,-0.077516,0.228586), vec3(-0.030350,0.225915,0.358234),\nvec3(-0.080303,0.268906,0.320895), vec3(-0.060741,0.198357,0.361936),\nvec3(-0.044905,0.007101,-0.151663), vec3(-0.022453,0.003774,-0.147495),\nvec3(-0.034651,-0.048095,0.025030), vec3(-0.043554,-0.044503,-0.016917),\nvec3(-0.005997,-0.049957,-0.017605), vec3(-0.028697,-0.090506,-0.129414),\nvec3(-0.019695,-0.079210,0.212615), vec3(-0.023080,-0.101265,0.192526),\nvec3(-0.010855,-0.081175,0.193163), vec3(-0.024873,-0.131527,-0.409951),\nvec3(-0.018723,-0.081289,-0.499202), vec3(-0.040832,-0.107573,-0.417095),\nvec3(-0.016569,-0.056362,-0.494974), vec3(-0.030417,-0.056700,-0.425668),\nvec3(-0.040841,-0.047447,0.025001), vec3(-0.032015,-0.056981,0.160728),\nvec3(-0.056353,-0.033206,0.024354), vec3(-0.043225,-0.027952,0.263428),\nvec3(-0.013975,-0.038304,0.245455), vec3(-0.044743,0.027886,0.318292),\nvec3(-0.055112,0.046600,0.316356), vec3(-0.023612,-0.047375,-0.018000),\nvec3(-0.028141,0.013155,-0.172355), vec3(-0.063728,-0.025988,-0.017044),\nvec3(0.063744,-0.026007,-0.017065), vec3(-0.000000,-0.058227,-0.195286),\nvec3(0.038090,-0.049201,-0.202304), vec3(0.063909,-0.028900,0.024153),\nvec3(0.064512,-0.038400,0.158684), vec3(-0.000000,0.148241,-0.006096),\nvec3(-0.000000,0.147293,0.016150), vec3(0.038164,0.121746,0.017311),\nvec3(0.063658,0.108208,-0.064744), vec3(0.059481,0.095042,-0.151997),\nvec3(0.068218,0.047742,-0.152467), vec3(0.044846,0.043481,-0.172589),\nvec3(0.073542,0.050112,-0.068682), vec3(0.059463,-0.088057,0.174143),\nvec3(0.064200,0.120341,0.233263), vec3(0.000000,0.160173,0.232851),\nvec3(0.000000,0.189595,0.293537), vec3(0.071469,0.076748,0.228308),\nvec3(0.049663,0.157629,0.297066), vec3(0.066264,0.156635,0.328337),\nvec3(0.029874,0.198142,0.300285), vec3(0.000000,0.205382,0.293949),\nvec3(0.000000,0.232457,0.353758), vec3(0.015602,0.212517,0.421605),\nvec3(0.000000,0.212708,0.428931), vec3(0.063761,0.060708,0.314897),\nvec3(0.059435,-0.059403,-0.027071), vec3(0.041503,-0.131616,-0.306437),\nvec3(0.063858,0.101862,0.140147), vec3(0.000000,0.142012,0.140147),\nvec3(0.000000,0.155858,0.190785), vec3(-0.000000,0.146079,-0.074739),\nvec3(-0.000000,0.124540,-0.151663), vec3(-0.000640,0.092134,-0.172112),\nvec3(0.073969,-0.071693,-0.082077), vec3(0.045132,-0.060325,-0.019866),\nvec3(0.058092,-0.088496,-0.130036), vec3(0.044471,-0.087437,-0.144479),\nvec3(0.052007,-0.143352,-0.154882), vec3(0.055815,-0.145691,-0.151522),\nvec3(0.055020,-0.165704,-0.159034), vec3(0.030503,-0.164912,-0.155849),\nvec3(0.031740,-0.153302,-0.128355), vec3(0.029651,-0.150329,-0.138748),\nvec3(0.040084,-0.141612,-0.157378), vec3(0.044641,-0.138984,-0.161153),\nvec3(0.044720,-0.162418,-0.168728), vec3(0.028263,-0.149059,-0.143295),\nvec3(0.030069,-0.147075,-0.149529), vec3(0.049616,-0.134761,-0.105811),\nvec3(0.066482,-0.082098,0.190793), vec3(0.057550,-0.158149,0.187494),\nvec3(0.028632,-0.082080,0.173946), vec3(0.037679,-0.153548,0.181361),\nvec3(-0.063930,0.004883,0.258892), vec3(-0.060246,-0.077644,0.227332),\nvec3(-0.044781,-0.076078,0.242113), vec3(-0.000000,0.061669,-0.217024),\nvec3(0.035351,0.065775,-0.176018), vec3(0.040432,0.026719,-0.227164),\nvec3(0.054984,-0.103831,-0.311664), vec3(0.048434,-0.009911,-0.215237),\nvec3(-0.046126,0.043481,-0.172589), vec3(-0.036631,0.065775,-0.176018),\nvec3(-0.041260,0.026719,-0.227164), vec3(-0.049261,-0.009911,-0.215237),\nvec3(0.049709,-0.036625,-0.324064), vec3(-0.000000,-0.138822,-0.306167),\nvec3(0.036375,-0.016836,-0.327529), vec3(0.068194,0.118709,0.303856),\nvec3(0.044582,-0.076068,0.242146), vec3(0.069920,0.014745,0.022174),\nvec3(0.064028,0.111032,0.186358), vec3(0.063739,0.105644,0.018043),\nvec3(0.058764,-0.107875,0.215860), vec3(-0.038090,-0.049201,-0.202304),\nvec3(-0.064437,-0.038381,0.158615), vec3(-0.063905,-0.028894,0.024158),\nvec3(-0.063659,0.108208,-0.064744), vec3(-0.038165,0.121746,0.017311),\nvec3(-0.071766,0.072937,0.185814), vec3(-0.064298,-0.027274,0.184356),\nvec3(-0.071469,0.076748,0.228308), vec3(-0.059481,0.095042,-0.151997),\nvec3(-0.068223,0.047736,-0.152465), vec3(-0.073540,0.050116,-0.068680),\nvec3(-0.059453,-0.085451,0.176324), vec3(-0.064201,0.120341,0.233263),\nvec3(-0.049663,0.157629,0.297066), vec3(-0.066264,0.156635,0.328337),\nvec3(-0.029875,0.198142,0.300285), vec3(0.063726,0.004886,0.258965),\nvec3(-0.015602,0.212517,0.421605), vec3(-0.063761,0.060708,0.314897),\nvec3(-0.059403,-0.059369,-0.027015), vec3(-0.041504,-0.131616,-0.306437),\nvec3(-0.063858,0.101861,0.140147), vec3(-0.073954,-0.071686,-0.082011),\nvec3(-0.045097,-0.060286,-0.019814), vec3(-0.058093,-0.088511,-0.129967),\nvec3(-0.044476,-0.087457,-0.144415), vec3(-0.052012,-0.143377,-0.154786),\nvec3(-0.055025,-0.165728,-0.158931), vec3(-0.055819,-0.145715,-0.151425),\nvec3(-0.031736,-0.153316,-0.128263), vec3(-0.040090,-0.141638,-0.157287),\nvec3(-0.044728,-0.162441,-0.168628), vec3(-0.044648,-0.139011,-0.161062),\nvec3(-0.028264,-0.149079,-0.143206), vec3(-0.030507,-0.164936,-0.155753),\nvec3(-0.030073,-0.147097,-0.149439), vec3(-0.049605,-0.134763,-0.105724),\nvec3(-0.029650,-0.150347,-0.138657), vec3(-0.057588,-0.146186,0.161494),\nvec3(-0.066522,-0.081714,0.193173), vec3(-0.037698,-0.139266,0.158309),\nvec3(-0.028619,-0.079658,0.176963), vec3(-0.049710,-0.036625,-0.324064),\nvec3(-0.054985,-0.103831,-0.311664), vec3(-0.036375,-0.016836,-0.327529),\nvec3(-0.068195,0.118709,0.303856), vec3(-0.069920,0.014745,0.022174),\nvec3(-0.064028,0.111032,0.186358), vec3(-0.063739,0.105644,0.018043),\nvec3(-0.058892,-0.113610,0.211436), vec3(-0.072920,0.058086,0.020204),\nvec3(-0.072059,0.069163,0.143723), vec3(0.072920,0.058086,0.020204),\nvec3(0.072059,0.069163,0.143722), vec3(0.060094,-0.077647,0.227415),\nvec3(-0.045435,-0.099731,0.232698), vec3(0.045254,-0.096345,0.233174),\nvec3(0.064315,-0.027290,0.184439), vec3(0.071766,0.072937,0.185813),\nvec3(-0.058560,-0.154121,-0.142593), vec3(0.058560,-0.154100,-0.142694),\nvec3(0.048781,-0.164243,-0.123979), vec3(0.028935,-0.238590,-0.127814),\nvec3(0.059508,-0.219812,-0.134373), vec3(0.044207,-0.265766,-0.130778),\nvec3(0.059729,-0.245941,-0.121860), vec3(0.032847,-0.224661,-0.125026),\nvec3(0.035614,-0.264900,-0.088443), vec3(0.028548,-0.267198,-0.115267),\nvec3(0.059389,-0.267072,-0.115064), vec3(0.050640,-0.264598,-0.088534),\nvec3(0.044324,-0.225219,-0.118346), vec3(0.050920,-0.217822,0.185554),\nvec3(0.036519,-0.234315,0.192106), vec3(0.028118,-0.154694,0.192768),\nvec3(0.052567,-0.159698,0.218192), vec3(0.044752,-0.159491,0.227571),\nvec3(0.044158,-0.229722,0.221335), vec3(0.037748,-0.158194,0.218165),\nvec3(0.029034,-0.157358,0.212114), vec3(0.029621,-0.226522,0.201516),\nvec3(0.025770,-0.155242,0.196754), vec3(0.056828,-0.158922,0.212412),\nvec3(0.033821,-0.261856,0.238208), vec3(0.032946,-0.267347,0.197947),\nvec3(0.057110,-0.266281,0.198505), vec3(0.054516,-0.262499,0.237535),\nvec3(0.056639,-0.233307,0.196726), vec3(0.054280,-0.228331,0.207828),\nvec3(0.045952,-0.265022,0.249360), vec3(-0.048777,-0.164275,-0.123878),\nvec3(-0.028936,-0.238636,-0.127777), vec3(-0.059509,-0.219852,-0.134316),\nvec3(-0.044209,-0.265809,-0.130761), vec3(-0.059729,-0.245991,-0.121824),\nvec3(-0.032847,-0.224708,-0.124977), vec3(-0.035609,-0.264977,-0.088426),\nvec3(-0.028547,-0.267254,-0.115254), vec3(-0.059388,-0.267127,-0.115046),\nvec3(-0.050635,-0.264675,-0.088515), vec3(-0.044323,-0.225272,-0.118296),\nvec3(-0.051009,-0.198327,0.131237), vec3(-0.028173,-0.145669,0.167854),\nvec3(-0.036413,-0.215864,0.129891), vec3(-0.052700,-0.162036,0.187846),\nvec3(-0.044248,-0.224870,0.158020), vec3(-0.044914,-0.166288,0.196236),\nvec3(-0.037880,-0.160718,0.188572), vec3(-0.029664,-0.213017,0.141859),\nvec3(-0.029149,-0.157140,0.183654), vec3(-0.025837,-0.148035,0.171116),\nvec3(-0.054326,-0.217702,0.146449), vec3(-0.056943,-0.158620,0.183104),\nvec3(-0.033499,-0.260987,0.159062), vec3(-0.032350,-0.248052,0.120549),\nvec3(-0.054178,-0.261502,0.157946), vec3(-0.056530,-0.247620,0.121256),\nvec3(-0.056567,-0.217226,0.134270), vec3(-0.045633,-0.268906,0.167522) \n);\nconst uint indices[576] = uint[](\n524800U, 1312771U, 2100742U, 2624521U, 1578500U, 2890252U, 4201998U, 4989969U,\n2361876U, 5509652U, 792598U, 536599U, 7091225U, 7353881U, 7879168U, 277504U,\n8138752U, 8929824U, 9717795U, 9717286U, 10768423U, 9718824U, 11556394U, 524312U,\n12344365U, 1054723U, 1312276U, 2100234U, 1575433U, 2626069U, 1574917U, 12869168U,\n2889732U, 13121561U, 12084781U, 536116U, 6566954U, 7616562U, 8412175U, 10767925U,\n14174245U, 9719849U, 10775094U, 10775589U, 263223U, 14704687U, 11825199U, 15233539U,\n15732795U, 15498301U, 16545338U, 17071680U, 17860162U, 18648133U, 14973460U, 16001556U,\n16778774U, 19137608U, 19412508U, 19698716U, 19938305U, 14456833U, 19175991U, 21012046U,\n9479249U, 21275731U, 22325287U, 21800021U, 23113302U, 14419017U, 23638573U, 16806915U,\n815636U, 15470654U, 14972477U, 16022549U, 15234617U, 23378011U, 16809530U, 7387723U,\n13415469U, 18875486U, 19437142U, 19951197U, 23632964U, 10266677U, 9464914U, 22324308U,\n13936694U, 14198866U, 14703193U, 23883865U, 12327951U, 12082703U, 4211744U, 3940384U,\n23376964U, 17347140U, 12075041U, 13392929U, 23619152U, 20493392U, 17598542U, 20743758U,\n19709528U, 22582872U, 7115827U, 22832714U, 22589002U, 6575147U, 25178667U, 6829619U,\n11555866U, 13391898U, 7617564U, 7903260U, 19970588U, 7627776U, 16823900U, 17072220U,\n5795931U, 16788571U, 3152433U, 12589105U, 5773360U, 14691376U, 25429044U, 25454690U,\n25974316U, 26265132U, 27053157U, 27315813U, 28103785U, 27842664U, 13643370U, 28624940U,\n29417070U, 29940849U, 30467187U, 4777485U, 30993012U, 30728306U, 1582091U, 5040243U,\n31203858U, 2158599U, 1895942U, 3469873U, 5039634U, 4989556U, 25716843U, 32030828U,\n32293474U, 31255569U, 33094268U, 27578495U, 33870464U, 34134122U, 34353760U, 34657303U,\n34876952U, 35720838U, 36508809U, 36201603U, 37296780U, 35987599U, 38078074U, 38073474U,\n35987083U, 38610029U, 39135266U, 39660633U, 39923289U, 38819891U, 39115412U, 40711321U,\n41236578U, 42024606U, 42287262U, 10041506U, 9520763U, 9238172U, 10568868U, 10569767U,\n13120131U, 33345637U, 28103322U, 40424065U, 27840617U, 29162606U, 13685867U, 29416562U,\n29942437U, 28596372U, 4725259U, 30729332U, 31517815U, 31204358U, 31518215U, 38324333U,\n3694246U, 26300003U, 40436377U, 32036994U, 32294044U, 30992401U, 33093800U, 27590272U,\n34133124U, 27349607U, 34390138U, 34614917U, 34877471U, 36463754U, 38823457U, 44639379U,\n42545828U, 42779259U, 43069991U, 40710818U, 10044456U, 9500195U, 9254950U, 574046U,\n24691371U, 23157420U, 22851756U, 26828462U, 26528942U, 39412400U, 46738608U, 47266995U,\n47540398U, 18922676U, 45182039U, 29155511U, 48066738U, 48329913U, 31804017U, 49082993U,\n48533057U, 30731450U, 29420216U, 18642495U, 48794809U, 18184263U, 31461436U, 49313851U,\n49578588U, 48532551U, 18123962U, 24729246U, 25001141U, 25525931U, 31029317U, 32832704U,\n45704831U, 46989952U, 47547060U, 19760223U, 47285832U, 18974793U, 52268229U, 24481986U,\n53318857U, 54106828U, 50962110U, 49913537U, 53582544U, 55157430U, 55682639U, 22915123U,\n47818452U, 42052249U, 44936353U, 42547357U, 40715421U, 56141525U, 42748095U, 50111190U,\n55880407U, 56404519U, 19708610U, 45678181U, 47004831U, 47005313U, 45705395U, 33087159U,\n47234206U, 48029880U, 56714424U, 22899924U, 17075775U, 48294586U, 30994620U, 18708539U,\n49344572U, 45196470U, 23364760U, 56973485U, 33898137U, 47545537U, 44924630U, 48819269U,\n57245822U, 33384064U, 47284931U, 57498799U, 25003198U, 18974404U, 19236941U, 54631112U,\n20997844U, 55163089U, 40217303U, 25511615U, 40218151U, 55918753U, 56208033U, 55879253U,\n50088017U, 56140371U, 13178511U, 25743U, 58046144U, 58309312U, 58543716U, 58834532U,\n46507180U, 56998622U, 45200094U, 58572924U, 44416636U, 59067439U, 49136175U, 39696594U,\n59322434U, 17679426U, 59514894U, 43632142U, 44680870U, 59069606U, 57749144U, 59357336U,\n38814242U, 21080143U, 44679826U, 59843809U, 49137889U, 49079013U, 59864805U, 58771684U,\n60145892U, 58837672U, 32620712U, 46751962U, 48063706U, 55141014U, 39691414U, 38389860U,\n58294490U, 46251226U, 57212087U, 33116270U, 29678760U, 60089000U, 45202608U, 46487728U,\n8198285U, 34881165U, 73360U, 8126608U, 34933895U, 34671239U, 51480263U, 51742919U,\n20285643U, 52730571U, 50711747U, 60621956U, 24407756U, 54573772U, 14457550U, 53505742U,\n54628445U, 40712811U, 40449643U, 42021535U, 44909214U, 41206891U, 45927549U, 26791549U,\n32820905U, 32570025U, 28425897U, 27318441U, 25216679U, 28360871U, 43892332U, 11322976U,\n58045109U, 32866523U, 45939419U, 47537371U, 58026715U, 45396063U, 24996569U, 45399769U,\n49622194U, 56720050U, 3466917U, 31726245U, 12345977U, 49045113U, 23407805U, 24163005U,\n17136344U, 48530136U, 29969011U, 56717497U, 60891879U, 61149834U, 61460711U, 61986027U,\n61676681U, 62199016U, 61460104U, 61411470U, 62771950U, 63037166U, 63035627U, 63296748U,\n63300842U, 62511858U, 63776405U, 64350357U, 65138422U, 65926393U, 65927418U, 66409619U,\n66975486U, 67502335U, 66971899U, 67241204U, 68284675U, 66713336U, 67503874U, 35195533U,\n36243089U, 36716176U, 36250344U, 38077671U, 61150445U, 63557866U, 61674217U, 62247154U,\n61414635U, 61723375U, 63036657U, 62775531U, 63297776U, 61201134U, 62514417U, 38591125U,\n67708659U, 64242940U, 64574717U, 65390327U, 63777524U, 67970818U, 67503360U, 67757812U,\n68288254U, 67501828U, 67234047U, 68290305U, 66711812U, 54397670U, 53873864U, 68554470U,\n69079816U, 53088461U, 52565253U, 60427974U, 52039370U, 68819211U, 70392587U, 69606152U,\n69082377U, 71179527U, 69867279U, 54927571U, 55452945U, 72755475U, 73543446U, 73805592U,\n74331345U, 73284380U, 75382045U, 71973655U, 75644690U, 72499994U, 73283860U, 74071328U,\n51481291U, 50958543U, 20288206U, 54366469U, 50700006U, 52563210U, 68558599U, 53874950U,\n68556047U, 53088008U, 68817164U, 70130446U, 70654216U, 69606669U, 69864715U, 71177998U,\n47817427U, 54935824U, 20849433U, 57812763U, 59387157U, 55451922U, 54932768U, 75644191U,\n71450898U, 74859292U, 74857761U, 71974685U, 74072862U, 72497441U, 68022518U, 66455286U,\n73282321U, 71970577U, 72493846U, 73279766U, 44690679U, 59593975U, 65140473U, 64876793U,\n65923317U, 66189045U, 59279128U, 72992024U, 17604377U, 73434905U, 59634426U, 4310778U,\n4322556U, 8921340U, 57787669U, 72202517U, 74069779U, 72496403U, 66397955U, 64301602U,\n55452239U, 74293980U, 53845193U, 53058249U, 35986572U, 37819020U, 37294214U, 37035142U,\n53057221U, 52008133U, 51236039U, 52284614U, 60622983U, 60624520U, 5509130U, 2107966U \n);\n\n\n\/\/===========================================================================\n\n\/\/ http:\/\/iquilezles.org\/www\/articles\/intersectors\/intersectors.htm\nbool boxIntersect( in vec3 ro, in vec3 rd, in vec3 cen, in vec3 rad ) \n{\n\tvec3 roo = ro - cen;\n    if( abs(roo.x)<rad.x && \n        abs(roo.y)<rad.y && \n        abs(roo.z)<rad.z )\n        return true;\n\n    vec3 m = 1.0\/rd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\treturn ( tN < tF && tF > 0.0);\n}\n\n\n\/\/ http:\/\/iquilezles.org\/www\/articles\/intersectors\/intersectors.htm\nvec3 triIntersect( in vec3 ro, in vec3 rd, in vec3 v0, in vec3 v1, in vec3 v2 )\n{\n    vec3 v1v0 = v1 - v0;\n    vec3 v2v0 = v2 - v0;\n    vec3 rov0 = ro - v0;\n\n    vec3  n = cross( v1v0, v2v0 );\n    vec3  q = cross( rov0, rd );\n    float d = 1.0\/dot( rd, n );\n    float u = d*dot( -q, v2v0 );\n    float v = d*dot(  q, v1v0 );\n    float t = d*dot( -n, rov0 );\n\n    if( u<0.0 || u>1.0 || v<0.0 || (u+v)>1.0 ) t = -1.0;\n    \n    return vec3( t, u, v );\n}\n\n\/\/===========================================================================\n\/\/ procedural animation for the fox\n\nvec3 animate(vec3 v)\n{\n    float time = iTime+13.0;\n    \n\ttime = floor(time*8.0)\/8.0; \/\/ force 8 fps\n    \n    \/\/ breath\n    {\n      vec3 p = vec3(0.0,0.05,0.23);\n      float f = 1.0-smoothstep(0.0,0.16,length(p-v) );\n        \n      float b = 1.0 + 0.18*f*(0.5+0.5*sin(time*8.0));\n      v = p + (v-p)*b;  \n        \n    }\n\n    \/\/ tail\n    {\n        float k = v.z - (-0.08);\n        if( k<0.0 )\n        {\n\n        float bn = sin(time*0.11);\n        bn = bn*bn*bn;\n        float an = sin(time*2.0 + k*6.0 + bn*10.0 + 2.0);\n        an *= 0.5*k*an; an += 0.2;\n        float co = cos(an);\n        float si = sin(an);\n        vec2 p = vec2(0.0,-0.08);\n        v.xz = p + mat2(co,-si,si,co)*(v.xz-p);\n        }\n    }\n    \/\/ head\n    {\n        float k = v.z - (+0.16);\n        if( k>0.0 )\n        {\n            \n        float an = sin(time*0.7*0.5);\n        an = an*an*an;\n        an = 1.5*k*an;\n        float co = cos(an);\n        float si = sin(an);\n        vec2 p = vec2(0.0,0.16);\n        v.xz = p + mat2(co,-si,si,co)*(v.xz-p);\n            \n\n        an = sin(time*0.5*0.5);\n        an = an*an*an;\n        an = -0.95*k*abs(an);\n        co = cos(an);\n        si = sin(an);\n        p = vec2(0.0,0.16);\n        v.yz = p + mat2(co,-si,si,co)*(v.yz-p);\n        }\n    }\n    \n    \n    return v;\n}\n\n\/\/===========================================================================\n\n\/\/ Brute force raytrace, no acceleration structure\n\n#define ZERO min(0,iFrame)\n\nbool intersectMesh( in vec3 ro, in vec3 rd, float tmax, out float oDis, out vec3 oNor, out vec2 oUV, out int oTri )\n{\n    ro.z += 0.5;\n    if( !boxIntersect( ro, rd, vec3(0.0), vec3(0.18,0.3,0.52) ) )\n        return false;\n        \n    bool res = false;\n    float tmin = tmax;\n    for( int i=ZERO; i<numFaces; i++ )\n    {\n\t\t\/\/ get the triangle\n        uint id = indices[i];\n        int id0 = int((id>>0)&511U);\n        int id1 = int((id>>9)&511U);\n        int id2 = int((id>>18)&511U);\n        vec3 v0 = vertices[id0];\n        vec3 v1 = vertices[id1];\n        vec3 v2 = vertices[id2];\n        \n        v0 = animate(v0);\n        v1 = animate(v1);\n        v2 = animate(v2);\n\n\t\tvec3 h = triIntersect( ro, rd, v0, v1, v2 );\n        if( h.x>0.0 && h.x<tmin)\n        {\n            tmin = h.x;\n            oNor = normalize(cross(v1-v0,v2-v0));;\n            oDis = tmin;\n            oUV = h.yz;\n            oTri = i;\n            res = true;\n        }\n    }\n    \n    \n    return res;\n}\n\nbool intersectShadowMesh( in vec3 ro, in vec3 rd )\n{\n    ro.z += 0.5;\n    if( !boxIntersect( ro, rd, vec3(0.0), vec3(0.18,0.3,0.52) ) )\n        return false;\n\n    bool res = false;\n    for( int i=ZERO; i<numFaces; i++ )\n    {\n\t\t\/\/ get the triangle\n        uint id = indices[i];\n        int id0 = int((id>>0)&511U);\n        int id1 = int((id>>9)&511U);\n        int id2 = int((id>>18)&511U);\n        vec3 v0 = vertices[id0];\n        vec3 v1 = vertices[id1];\n        vec3 v2 = vertices[id2];\n\n        v0 = animate(v0);\n        v1 = animate(v1);\n        v2 = animate(v2);\n\n        vec3 h = triIntersect( ro, rd, v0, v1, v2 );\n        if( h.x>0.0 )\n        {\n            res = true;\n            break;\n        }\n    }\n    \n    return res;\n}\n\n\nfloat hash1( float n ) { return fract(sin(n)*158.5453123); }\n\n\n\/\/===========================================================================\n\n\/\/ Terrain tracer, marches one triangle at a time\nconst float minh = -2.3;\nconst float maxh = 2.23;\n\n\nfloat height(vec2 p)\n{\n    float f = 0.5+0.5*sin(0.3*p.x)*sin(0.3*p.y);\n    \n    f *= mix(0.1,1.0,smoothstep(-1.0,0.0,-p.y+0.5*sin(p.x)) + smoothstep(4.0,8.0,p.y) );\n    \n\tf = 0.95*f + 0.05*hash1( dot(p,vec2(1.0,111.1)));\n    return mix(minh, maxh, f );\n}\n\n\/\/ Use this to toggle between taking 1 sample of the heightfield and taking\n\/\/ 3 samples (to fully construct the triangle on every step).\n#define SINGLE_SAMPLE 1\n\n\n\/\/ by Fizzer: https:\/\/www.shadertoy.com\/view\/XlcBRX\nvec3 intersectTerrain(vec3 o,vec3 r, out vec3 nn, out int tid)\n{\n    \/\/ Start ray at upper Y bounds\n    \/\/if(o.y > maxh) o += r * (maxh - o.y) \/ r.y;\n    \n    vec2 oc = vec2(floor(o.x), floor(o.z)), c;\n    vec2 dn = normalize(vec2(-1, 1));\n    vec3 ta, tb, tc;\n\n    \/\/ Initialise the triangle vertices\n    ta = vec3(oc.x, height(oc + vec2(0, 0)), oc.y);\n    tc = vec3(oc.x + 1., height(oc + vec2(1, 1)), oc.y + 1.);\n    if(fract(o.z) < fract(o.x))\n        tb = vec3(oc.x + 1., height(oc + vec2(1, 0)), oc.y + 0.);\n    else\n        tb = vec3(oc.x, height(oc + vec2(0, 1)), oc.y + 1.);\n\n    float t0 = 1e-4, t1;\n\n    \/\/ Ray slopes\n    vec2 dd = vec2(1) \/ r.xz;\n    float dnt = 1.0 \/ dot(r.xz, dn);\n    \n    float s = max(sign(dnt), 0.);\n    c = ((oc + max(sign(r.xz), 0.)) - o.xz) * dd;\n\n    vec3 rs = sign(r);\n\n    for(int i=ZERO; i<450; i++)\n    {  \n        t1 = min(c.x, c.y);\n\n        \/\/ Test ray against diagonal plane\n        float dt = dot(oc - o.xz, dn) * dnt;\n        if(dt > t0 && dt < t1)\n            t1 = dt;\n \n#if !SINGLE_SAMPLE\n        \/\/ Sample the heightfield for all three vertices.\n        vec2 of = (dot(o.xz + r.xz * (t0 + t1) * .5 - oc, dn) > 0.) ? vec2(0, 1) : vec2(1, 0);\n        tb = vec3(oc.x + of.x, height(oc + of), oc.y + of.y);\n        ta = vec3(oc.x, height(oc + vec2(0, 0)), oc.y);\n        tc = vec3(oc.x + 1., height(oc + vec2(1, 1)), oc.y + 1.);\n#endif        \n\n        \/\/ Test ray against triangle plane\n        vec3 hn = cross(ta - tb, tc - tb);\n        float hh = dot(ta - o, hn) \/ dot(r, hn);\n\n        if(hh > t0 && hh < t1)\n        {\n            \/\/ Intersection with triangle has been found\n            nn = hn;\n            \n            float s = sign(nn.y);\n            nn *= s;\n            \n            tid = int( dot(oc.xy+s,vec2(113,31)) );\n            return o + r * hh;\n        }\n\n#if SINGLE_SAMPLE\n        vec2 offset;\n        \n        \/\/ Get an \"axis selector\", which has 1.0 for the near (intersected) axis\n        \/\/ and 0.0 for the far one\n        vec2 ss = step(c, c.yx);\n\n        \/\/ Get the coordinate offset of where to read the next vertex height from\n        if(dt >= t0 && dt < c.x && dt < c.y)\n        {\n            offset = vec2(1. - s, s);\n        }\n        else\n        {\n            offset = dot(r.xz, ss) > 0. ? vec2(2, 1) : vec2(-1, 0);\n\n            if(c.y < c.x)\n                offset = offset.yx;\n        }\n\n        \/\/ Get the next vertex\n        vec3 tnew = vec3(oc + offset, height(oc + offset)).xzy;\n\n        \/\/ Update the triangle vertices.\n        if(dt >= t0 && dt < c.x && dt < c.y)\n        {\n            tb = tnew;\n        }\n        else\n        {\n            \/\/ Swap vertex order based on sign of ray axis\n            if(dot(r.xz, ss) > 0.)\n            {\n                ta = tb;\n                tb = tc;\n                tc = tnew;\n            }\n            else\n            {\n                tc = tb;\n                tb = ta;\n                ta = tnew;\n            }\n\n            \/\/ Step the grid coordinates along to the next cell\n            oc.xy += rs.xz * ss;\n            c.xy += dd.xy * rs.xz * ss;\n        }\n#else\n        \/\/ Get an \"axis selector\", which has 1.0 for the near (intersected) axis\n        \/\/ and 0.0 for the far one\n        vec2 ss = step(c, c.yx);\n        \n        if(dt < t0 || dt >= c.x || dt >= c.y)\n        {\n            \/\/ Step the grid coordinates along to the next cell\n            oc.xy += rs.xz * ss;\n            c.xy += dd.xy * rs.xz * ss;\n        }\n        \n#endif\n        t0 = t1;\n\n        \/\/ Test if the ray left the upper Y bounds\n        if(((maxh - o.y) \/ r.y < t0 && r.y > 0.) || t0 > 200.)\n            break;\n\n    }\n    tid = -1;\n    return vec3(10000);\n}\n\n\/\/=====================================================\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in float cr )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\n\n\/\/=====================================================\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    float tottmin = 1e10;\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        \/\/ pixel coordinates\n        vec2 o = vec2(float(m),float(n)) \/ float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))\/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)\/iResolution.y;\n        #endif\n\n        \/\/ camera\n        float an = -0.07*(iTime-10.0) - 0.375;\n        vec3 ro = vec3(1.5*sin(an),0.2,1.5*cos(an)-0.3);\n        vec3 ta = vec3(0.0,0.0,-0.3);\n        \n        ta = vec3(0.2*cos(an),0.0,.2*sin(an)-0.3);\n        \n        \n        vec3 of = sin(iTime+vec3(0.0,2.0,4.0));\n        ro += 0.005*of*of*of;\n        ta += 0.005*of*of*of;\n        \n        \/\/ ray\n        mat3 ca = setCamera( ro, ta, -0.05);\n        vec3 rd = normalize( ca * vec3(p,-4.0) );\n\n        \n\n\n        \/\/ sky\n\t\tvec3 lig = normalize( vec3( 0.4,0.3,0.3) );\n        vec3 col = vec3(0.5,0.7,1.5)*1.25 - rd.y*0.6;\n        col += 6.0*vec3(3.0,1.2,0.4)*pow(clamp(dot(rd,lig),0.0,1.0),24.0);\n\n        float tmin = 1e10;\n    \n        vec3 mate = vec3(-1.0);\n        vec3 nor = vec3(0.0);\n        float occ = 1.0;\n        \n        \/\/ fox\n\t\t{\n            float t;\n            vec3 tnor;\n            vec2 uv;\n            int ttri;\n            if( intersectMesh( ro, rd, tmin, t, tnor, uv, ttri ) )\n            {\n                nor = tnor;\n                tmin = t;\n                mate = vec3(0.2,0.2,0.2);\n                mate = 0.35*vec3(0.36,0.13,0.028);\n                \n                if( ttri<126) mate = vec3(0.17);\n\t\t\t\tif( ttri>419) mate = 0.1*vec3(0.087, 0.040, 0.013);\n\n                mate *= 0.7+0.6*texture(iChannel0,uv*0.1).x;\n                #if 0\n                mate *= 0.4 + 0.6*smoothstep( 0.0, 0.05, uv.x ) * \n                                  smoothstep( 0.0, 0.05, uv.y ) * \n                                  smoothstep( 0.0, 0.05, (1.0-uv.x-uv.y) );\n                #endif\n                mate *= 0.8;\n                \n                mate *= 0.8+0.4*hash1(float(ttri));\n                \n                occ = 0.5 + 0.5*nor.y;\n            }\n        }\n        {\n        \/\/ terrain\n        vec3 tnor;\n        int tid = -1;\n        vec3 pos = intersectTerrain(ro*0.5,rd, tnor, tid)\/0.5;\n\t\tfloat t = length(pos-ro);\n        if( t>0.0 && t<tmin)\n        {\n            nor = normalize(tnor);\n            tmin = t;\n            vec3 pos = ro + t*rd;\n            mate = 0.14*vec3(0.8,0.9,1.0);\n            mate = mix( mate, vec3(0.025,0.02,0.015)*0.6, 1.0-smoothstep(0.9,1.0,nor.y) );\n            \n            mate *= 0.75+0.5*hash1(float(tid));\n            mate *= 0.5+texture(iChannel0,pos.xz).x;\n            \n            occ *= 0.15 + 0.85*smoothstep( 0.0, 0.35, length((pos.xz-vec2(0.0,-0.46))*vec2(1.0,0.5)) );\n        }\n        }\n\n        \/\/ shading\n        if( mate.x>-0.5  )\n        {\n            vec3 pos = ro + tmin*rd;\n            float fre = clamp(1.0+dot(nor,rd),0.0,1.0);\n            float bou = clamp(0.3 - 0.7*nor.y,0.0,1.0);\n            float dif = clamp(dot(nor,lig ),  0.0,1.0);\n            \n            if( dif>0.001 )\n            if( length(pos.xz-vec2(-0.5,-0.2))<1.0 )\n            if( intersectShadowMesh( pos+nor*0.001, lig ) )\n                dif = 0.0;\n\n            \/\/ perform lighting\/shading\n            vec3 brdf = 5.0*vec3(0.15,0.50,1.30)*occ + \n                        2.0*vec3(7.00,4.00,2.00)*dif +\n                \t\t1.0*vec3(0.60,0.65,0.70)*bou+\n                        1.0*fre*(0.5+0.5*occ);\n\n            col =  brdf * mate;\n\n            \/\/ fog\n            col = mix( col, vec3(0.7,0.9,1.5), 1.0-exp(-0.009*tmin) );\n            \n            \/\/ sun\n            col += 1.2*vec3(3.0,1.0,0.4)*pow(clamp(dot(rd,lig),0.0,1.0),16.0);\n            \n        }\n        #if AA>1\n\t\ttottmin = min(tottmin,tmin);\n        #else\n        tottmin = tmin;\n        #endif\n    \/\/ gamma\n    col = pow( col, vec3(0.4545) );\n\n\t    tot += col;\n    #if AA>1\n    }\n    tot \/= float(AA*AA);\n    #endif\n    \n    \n\n\tfragColor = vec4( tot, tottmin );\n}\n","name":"Buffer A","description":"","type":"buffer"}]}}