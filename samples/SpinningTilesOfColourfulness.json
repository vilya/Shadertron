{"Shader":{"ver":"0.1","info":{"id":"lts3W7","date":"1423531554","viewed":129,"name":"Spinning Tiles of Colourfulness","username":"Vil","description":"My Shadertoy version of \"Hello World\"","likes":5,"published":3,"flags":0,"tags":["2d"],"hasliked":0},"renderpass":[{"inputs":[{"id":2,"src":"\/media\/a\/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":17,"src":"\/media\/a\/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float frameDuration = 1.0 \/ 60.0;\nconst float motionBlurWindow = 0.1; \/\/ seconds to motion blur over\nconst int motionBlurSamples = 20;    \/\/ number of motion blur samples\nconst float motionBlurDt = motionBlurWindow \/ float(motionBlurSamples - 1);\n\nconst float tileRotationSpeed = -1.67;\n\n\nvec4 tileColor(vec2 uvT, vec2 numTiles, float t)\n{\n\treturn vec4(floor(uvT) \/ numTiles, 0.5, 1.0);\n}\n\n\nbool inTile(vec2 uvT)\n{\n    vec2 tmp = abs(uvT);\n    return tmp.x <= 0.5 && tmp.y < 0.5;\n}\n\n\nmat2 rotation(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\n\nvec4 rotatedTile(vec2 uv, vec2 numTiles, float t)\n{\n    mat2 m = rotation(t * tileRotationSpeed - texture(iChannel0, uv).x * 0.2);\n    \n    vec2 uvT = uv * numTiles;\n    vec2 lo = floor(uvT) - 0.5;\n    vec2 hi = lo + 1.0;\n    vec2 hl = vec2(hi.x, lo.y);\n    vec2 lh = vec2(lo.x, hi.y);\n    \n    vec4 color = vec4(0.3);\n    if (inTile(m * (uvT - lo))) {\n        color = tileColor(m * (uvT - lo) + lo, numTiles, t);\n    }\n    else if (inTile(m * (uvT - hl))) {\n        color = tileColor(m * (uvT - hl) + hl, numTiles, t);\n    }\n    else if (inTile(m * (uvT - lh))) {\n        color = tileColor(m * (uvT - lh) + lh, numTiles, t);\n    }\n    else if (inTile(m * (uvT - hi))) {\n        color = tileColor(m * (uvT - hi) + hi, numTiles, t);\n    }\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float yScale = iResolution.y \/ iResolution.x;\n    float size = (sin(iTime) + 1.0) * 32.0 + 32.0;\n    vec2 tileSize = vec2(size, size * yScale);\n    vec2 numTiles = iResolution.xy \/ tileSize;    \n    \n    vec4 color = vec4(0.0);\n    float weightScale = 2.0 \/ float(motionBlurSamples * (motionBlurSamples + 1));\n    for (int i = 0; i < motionBlurSamples; ++i) {\n        float frame = iTime - motionBlurDt * float(i);\n        float weight = float(motionBlurSamples - i) * weightScale;\n        vec2 uv = rotation(frame) * (fragCoord.xy \/ iResolution.xy - 0.5) + 0.5;\n        color += rotatedTile(uv, numTiles, frame) * weight;\n    }\n\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}}